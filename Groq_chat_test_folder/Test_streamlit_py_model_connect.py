import streamlit as st
from groq import Groq

# –í–≤–æ–¥ API-–∫–ª—é—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
st.sidebar.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
api_key = st.sidebar.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Groq API-–∫–ª—é—á", type="password")

if not api_key:
    st.warning("–í–≤–µ–¥–∏—Ç–µ API-–∫–ª—é—á –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")
    st.stop()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Groq API
def chat_with_ai(user_id, message):
    client = Groq(api_key=api_key)
    user_session = f"session_{user_id}"
    
    if user_session not in st.session_state:
        st.session_state[user_session] = []

    st.session_state[user_session].append({"role": "user", "content": message})

    completion = client.chat.completions.create(
        model="llama-3.3-70b-versatile",
        messages=st.session_state[user_session],
        temperature=1,
        max_completion_tokens=1024,
        top_p=1,
        stream=True,
        stop=None,
    )

    response = ""
    for chunk in completion:
        response += chunk.choices[0].delta.content or ""

    st.session_state[user_session].append({"role": "assistant", "content": response})
    return response

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
st.title("AI –ß–∞—Ç —Å Groq API")

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å–µ–∞–Ω—Å–∞–º
user_id = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", key="user_id")
if not user_id:
    st.warning("–í–≤–µ–¥–∏—Ç–µ –∏–º—è, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —á–∞—Ç.")
    st.stop()

st.subheader(f"–ß–∞—Ç –¥–ª—è {user_id}")

# –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
user_input = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", key="user_input")

if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å") and user_input:
    response = chat_with_ai(user_id, user_input)
    st.text_area("–û—Ç–≤–µ—Ç –æ—Ç AI:", response, height=150)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
if f"session_{user_id}" in st.session_state:
    st.subheader("–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞")
    for msg in st.session_state[f"session_{user_id}"]:
        role = "ü§ñ AI" if msg["role"] == "assistant" else "üßë‚Äçüíª –í—ã"
        st.markdown(f"**{role}:** {msg['content']}")
